Index: app/src/main/java/com/example/pastatimer/ui/login/SignUpScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pastatimer.ui.login\r\n\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.delay\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport com.example.pastatimer.AppDatabase\r\nimport com.example.pastatimer.UserEntity\r\n\r\n\r\n@Composable\r\nfun SignUpScreen(navController: NavController) {\r\n    var user by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var confirmPassword by remember { mutableStateOf(\"\") }\r\n\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n\r\n    val context = LocalContext.current\r\n    val db = AppDatabase.getDatabase(context)\r\n    val userDao = db.userDao()\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(16.dp),\r\n        verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Text(\r\n            text = \"Create new account\",\r\n            style = MaterialTheme.typography.headlineLarge,\r\n            modifier = Modifier.padding(bottom = 32.dp)\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = user,\r\n            onValueChange = { user = it },\r\n            label = { Text(\"user\") },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(vertical = 8.dp)\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = password,\r\n            onValueChange = { password = it },\r\n            label = { Text(\"Password\") },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(vertical = 8.dp),\r\n            visualTransformation = PasswordVisualTransformation()\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = confirmPassword,\r\n            onValueChange = { confirmPassword = it },\r\n            label = { Text(\"Confirm Password\") },\r\n            visualTransformation = PasswordVisualTransformation(),\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(top = 8.dp)\r\n        )\r\n\r\n        Button(\r\n            onClick = {\r\n                if (password == confirmPassword && password.isNotBlank()) {\r\n                    coroutineScope.launch {\r\n                        val existingUser = userDao.getUserByUsername(user)\r\n                        if (existingUser == null) {\r\n                            val newUser = UserEntity(\r\n                                username = user,\r\n                                password = password,\r\n                                isVegetarian = false,\r\n                                allergens = \"\"\r\n                            )\r\n                            userDao.insertUser(newUser)\r\n                            snackbarHostState.showSnackbar(\r\n                                message = \"Account created successfully\",\r\n                                duration = SnackbarDuration.Short\r\n                            )\r\n                            delay(300)\r\n                            navController.navigate(\"login\")\r\n                        } else {\r\n                            snackbarHostState.showSnackbar(\r\n                                message = \"Username already exists\",\r\n                                duration = SnackbarDuration.Short\r\n                            )\r\n                        }\r\n                    }\r\n                } else {\r\n                    coroutineScope.launch {\r\n                        snackbarHostState.showSnackbar(\r\n                            message = \"Passwords do not match\",\r\n                            duration = SnackbarDuration.Short\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(top = 24.dp)\r\n        ) {\r\n            Text(\"Sign Up\")\r\n        }\r\n\r\n        MySnackbar(snackbarHostState = snackbarHostState)\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun SignUpScreenPreview() {\r\n    com.example.pastatimer.ui.theme.PastaTimerTheme {\r\n        SignUpScreen(navController = rememberNavController())\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pastatimer/ui/login/SignUpScreen.kt b/app/src/main/java/com/example/pastatimer/ui/login/SignUpScreen.kt
--- a/app/src/main/java/com/example/pastatimer/ui/login/SignUpScreen.kt	(revision 54b18bcfe06bdcab1371a77f3b1d9264b21c4127)
+++ b/app/src/main/java/com/example/pastatimer/ui/login/SignUpScreen.kt	(date 1747591514866)
@@ -46,7 +46,7 @@
         OutlinedTextField(
             value = user,
             onValueChange = { user = it },
-            label = { Text("user") },
+            label = { Text("User") },
             modifier = Modifier
                 .fillMaxWidth()
                 .padding(vertical = 8.dp)
@@ -74,7 +74,21 @@
 
         Button(
             onClick = {
-                if (password == confirmPassword && password.isNotBlank()) {
+                if (user.isBlank()) {
+                    coroutineScope.launch {
+                        snackbarHostState.showSnackbar(
+                            message = "Username cannot be empty",
+                            duration = SnackbarDuration.Short
+                        )
+                    }
+                } else if (password != confirmPassword || password.isBlank()) {
+                    coroutineScope.launch {
+                        snackbarHostState.showSnackbar(
+                            message = "Passwords do not match",
+                            duration = SnackbarDuration.Short
+                        )
+                    }
+                } else {
                     coroutineScope.launch {
                         val existingUser = userDao.getUserByUsername(user)
                         if (existingUser == null) {
@@ -98,13 +112,6 @@
                             )
                         }
                     }
-                } else {
-                    coroutineScope.launch {
-                        snackbarHostState.showSnackbar(
-                            message = "Passwords do not match",
-                            duration = SnackbarDuration.Short
-                        )
-                    }
                 }
             },
             modifier = Modifier
@@ -117,11 +124,3 @@
         MySnackbar(snackbarHostState = snackbarHostState)
     }
 }
-
-@Preview(showBackground = true)
-@Composable
-fun SignUpScreenPreview() {
-    com.example.pastatimer.ui.theme.PastaTimerTheme {
-        SignUpScreen(navController = rememberNavController())
-    }
-}
Index: app/src/test/java/com/example/pastatimer/UserDaoTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/example/pastatimer/UserDaoTest.kt b/app/src/test/java/com/example/pastatimer/UserDaoTest.kt
new file mode 100644
--- /dev/null	(date 1747591514837)
+++ b/app/src/test/java/com/example/pastatimer/UserDaoTest.kt	(date 1747591514837)
@@ -0,0 +1,78 @@
+package com.example.pastatimer
+
+import org.junit.Assert.*
+import org.junit.Before
+import org.junit.Test
+import org.mockito.kotlin.*
+
+class UserDaoTest {
+
+    private lateinit var mockUserDao: UserDao
+
+    @Before
+    fun setup() {
+        mockUserDao = mock()
+    }
+
+    @Test
+    fun testGetUserByUsername_returnsUser() {
+        val expectedUser = UserEntity(
+            username = "testuser",
+            password = "password123",
+            isVegan = true,
+            allergens = "Gluten,Nuts"
+        )
+        whenever(mockUserDao.getUserByUsername("testuser")).thenReturn(expectedUser)
+
+        val result = mockUserDao.getUserByUsername("testuser")
+
+        assertNotNull(result)
+        assertEquals(expectedUser.username, result?.username)
+        assertEquals(expectedUser.password, result?.password)
+        assertTrue(result?.isVegan == true)
+        assertEquals("Gluten,Nuts", result?.allergens)
+    }
+
+    @Test
+    fun insertUser_addsUserCorrectly() {
+        val user = UserEntity(
+            username = "inserted@example.com",
+            password = "insert123",
+            isVegan = false,
+            allergens = "Milk"
+        )
+
+        doNothing().whenever(mockUserDao).insertUser(user)
+        mockUserDao.insertUser(user)
+
+        whenever(mockUserDao.getUserByUsername(user.username)).thenReturn(user)
+        val retrievedUser = mockUserDao.getUserByUsername(user.username)
+
+        assertEquals(user, retrievedUser)
+    }
+
+    @Test
+    fun updatePreferences_updatesUserDataCorrectly() {
+        val user = UserEntity(
+            username = "update@example.com",
+            password = "initial",
+            isVegan = false,
+            allergens = ""
+        )
+
+        doNothing().whenever(mockUserDao).insertUser(user)
+        mockUserDao.insertUser(user)
+
+        doNothing().whenever(mockUserDao)
+            .updatePreferences(user.username, isVegan = true, allergens = "Nuts,Soy")
+
+        mockUserDao.updatePreferences(user.username, true, "Nuts,Soy")
+
+        val updatedUser = user.copy(isVegan = true, allergens = "Nuts,Soy")
+        whenever(mockUserDao.getUserByUsername(user.username)).thenReturn(updatedUser)
+
+        val result = mockUserDao.getUserByUsername(user.username)
+        assertEquals(true, result?.isVegan)
+        assertEquals("Nuts,Soy", result?.allergens)
+    }
+}
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n    alias(libs.plugins.ksp)\r\n    //alias(libs.plugins.compose.compiler)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.pastatimer\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.pastatimer\"\r\n        minSdk = 26\r\n        targetSdk = 35\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    ksp {\r\n        arg(\"room.schemaLocation\",\"$projectDir/schemas\")\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    implementation(libs.androidx.navigation.runtime.android)\r\n\r\n    //implementation(libs.androidx.navigation.runtime.desktop)\r\n    //implementation(libs.androidx.navigation.runtime.jvmstubs)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n    implementation(\"androidx.navigation:navigation-compose:2.7.7\")\r\n    implementation(libs.androidx.room.ktx.v261)\r\n    implementation(libs.androidx.room.runtime)\r\n    ksp(libs.androidx.room.compiler.v261)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 54b18bcfe06bdcab1371a77f3b1d9264b21c4127)
+++ b/app/build.gradle.kts	(date 1747591514887)
@@ -71,4 +71,7 @@
     implementation(libs.androidx.room.ktx.v261)
     implementation(libs.androidx.room.runtime)
     ksp(libs.androidx.room.compiler.v261)
+    testImplementation("junit:junit:4.13.2")
+    testImplementation("org.mockito:mockito-core:5.2.0")
+    testImplementation("org.mockito.kotlin:mockito-kotlin:4.1.0")
 }
\ No newline at end of file
